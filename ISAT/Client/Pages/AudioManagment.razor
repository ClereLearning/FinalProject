@page "/audiomanagment"
@using ISAT.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IInterviewService InterviewService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize]
@inject IJSRuntime Ijs // to run javascript

<PageTitle> Audio Managment </PageTitle>
<h3>Audio Managment</h3>
<br />
<button class="btn btn-light" @onclick="PrintIt"><i class="bi bi-printer" data-toggle="tooltip" title="Print" /> </button>
<br />
<hr />
<div class="row">
    <br />
    <div class="mb-3">
        <label asp-for="Searching" class="form-control">
            Search Interview
            @if (Searching.Length > 0)
            {
                <button class="btn btn-light" @onclick="SearchingReset"><i class="bi bi-arrow-counterclockwise" data-toggle="tooltip" title="Reset Search" /> </button>
            }
        </label>
        <InputText id="Searching" @bind-Value="Searching" class="form-control" aria-required="true" @onkeypress="SearchFor" @onkeydown="SearchFor" @onkeyup="SearchFor"></InputText>
    </div>
</div>
<hr />
<br />
@if (interviewList == null)
{
    <p> loading </p>
}
else
{
    <p>
        Show:
        <label><input type="checkbox" @bind="ShowLastName" /> Last Name</label>
        <label><input type="checkbox" @bind="ShowFirstName" /> First Name</label>
    </p>
    <QuickGrid Items="interviewList.AsQueryable()" Pagination="pagination">
        <PropertyColumn Property="i=> i.Interviewee.SocialName" Title="Social Name" Sortable="true" />
        @if (ShowFirstName)
        {
            <PropertyColumn Property="i=> i.Interviewee.FirstName" Title="First Name" Sortable="true" />
        }

        @if (ShowLastName)
        {
            <PropertyColumn Property="i=> i.Interviewee.LastName" Title="Last Name" Sortable="true" />
        }
        <PropertyColumn Property="i=> i.Date" Title="Interview Date" Format="dd/MM/yyyy" Sortable="true" />
        <PropertyColumn Property="i => i.Place" Title="Place" Sortable="true" />
        <PropertyColumn Property="i => i.InterviewStatus.Status" Title="Status" Sortable="true" />        
        <PropertyColumn Property="i=> i.FileName" Title="Audio Upload Date" Sortable="true" />
        <PropertyColumn Property="i=> i.AudioDate" Title="Audio Upload Date" Sortable="true" />
        <PropertyColumn Property="i=> i.AudioStatus" Title="Audio Status" Sortable="true" />
                <TemplateColumn>
            @if (CanEdit)
            {
                <button class="btn btn-primary" onclick="@(() => UploadIt(context))"><i class="bi bi-cloud-arrow-up" /></button> 
            }
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />

}

@code {
    [Parameter]

    public string Searching { get; set; } = string.Empty;

    protected List<Interview> interviewList = new();

    protected List<Interview> searchInterviewList = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    Boolean ShowFirstName, ShowLastName = false;

    Guid InterviewerId { get; set; }

    Boolean CanEdit { get; set; }

    Boolean CanSeeMore { get; set; }

    protected void SearchFor()
    {

        if (!string.IsNullOrEmpty(Searching))
        {
            interviewList = searchInterviewList.Where(x => (x.Interviewee.SocialName.IndexOf(Searching, StringComparison.OrdinalIgnoreCase) != -1))
            .ToList();
        }
        else
        {
            interviewList = searchInterviewList;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var stateProvider = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var CurrentUser = stateProvider.User;

        if (CurrentUser.IsInRole("Interviewer"))
        {

            CanEdit = true;
        }
        else
        {
            CanEdit = true;
        }


        if (CurrentUser.IsInRole("Researcher") || CurrentUser.IsInRole("Administrative"))
        {
            CanSeeMore = true;
        }
        else
        {
            CanSeeMore = false;
        }

        foreach (var claim in CurrentUser.Claims)
        {
            if (claim.Type == "sub")
            {
                InterviewerId = Guid.Parse(claim.Value);
                break;
            }
        }

        await GetInterviews();
        SearchFor();
    }

    protected async Task GetInterviews()
    {
        interviewList = await InterviewService.GetGetAudioInterviews();

        if (!CanSeeMore)
        {
            // if ClaimInterviewer
            interviewList = interviewList.Where(i => i.InterviewerId == InterviewerId).ToList();
        }

        searchInterviewList = interviewList;
    }

    public void Cancel()
    {

        NavigationManager.NavigateTo("/audiomanagment", true);
    }

    public void SearchingReset()
    {
        Searching = string.Empty;
        interviewList = searchInterviewList;
    }

    public void UploadIt(Interview i)
    {
        NavigationManager.NavigateTo($"audioaddedit/{i.Id}");
    }
    
    protected async Task PrintIt()
    {
        await Ijs.InvokeVoidAsync("window.print");
    }

}