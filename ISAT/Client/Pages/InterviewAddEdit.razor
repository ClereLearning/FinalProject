@page "/interviewaddedit"
@page "/interviewaddedit/{Id:int}"
@using ISAT.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IInterviewService InterviewService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

@if (Id == null)
{

    <PageTitle> Adding a new Interview </PageTitle>

    <h3>Adding a new Interview</h3>
}
else
{

    <PageTitle> Editing @interview.Interviewee.FirstName - @interview.Date!.ToShortDateString()  </PageTitle>

    <h3>Editing the @interview.Interviewee.FirstName - @interview.Date!.ToShortDateString() Interview</h3>

}

<br />
<hr />
<EditForm Model="@interview" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="mb-3">
            <label asp-for="Place" class="form-control">Interviewee</label>
            <InputSelect @bind-Value="interview.Interviewee.Id" class="form-select">                
                @foreach (var item in interviewees)
                {
                    <option value="@item.Id"> @item.FirstName @item.LastName </option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label asp-for="Place" class="form-control">Place</label>
            <InputText id="Place" @bind-Value="interview.Place" class="form-control" aria-required="true"></InputText>
        </div>                       
        <div class="mb-3">
            <label asp-for="Date" class="form-control">Date</label>
            <InputDate InitialDate="DateDefault" @bind-Value:format="dd/MM/yyyy" @bind-Value="@interview.Date" class="form-control" aria-required="true" />
        </div>
        <div class="mb-3">
            <label asp-for="Hour" class="form-control">Starting Time</label>
            <InputDate Type="InputDateType.Time" @bind-Value:format="HH:mm:ss" @bind-Value="@interview.Hour" class="form-control" aria-required="true" />
        </div>
        <div class="mb-3">
            <label asp-for="Hour" class="form-control">Duration</label>
            <InputDate Type="InputDateType.Time" @bind-Value:format="HH:mm:ss" @bind-Value="@interview.Hour" class="form-control" aria-required="true" />
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">@btnLabel</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>

</EditForm>

@code {
    [Parameter]

    public int? Id { get; set; }

    Interview interview = new Interview()
        {
            Interviewee = new Interviewee { },
            InterviewStatus = new InterviewStatus{}
    };

    InterviewStatus interviewStatus = new InterviewStatus { };

    Interviewee interviewee = new Interviewee { };

    protected List<Interviewee> interviewees = new();

    protected List<Interview> interviews = new();

    string btnLabel = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnLabel = Id == null ? "Save" : "Update";

        await GetInterviews();

        await GetInterviewees();
    }

    protected async Task<List<Interviewee>> GetInterviewees()
    {
        interviewees = await InterviewService.GetInterviewees();
        return interviewees;
    }

    protected async Task<List<Interview>> GetInterviews()
    {
        interviews = await InterviewService.GetInterviews();
        return interviews;
    }

    async Task HandleSubmit()
    {
        if (interview.Id != 0)
        {
            btnLabel = "Update";
            await InterviewService.PutInterview((Id == null ? 0 : Id.Value), interview);
            NavigationManager.NavigateTo("/interviewmanagment", true);
        }
        else
        {
            interview = await InterviewService.PostInterview(interview);
            NavigationManager.NavigateTo("/interviewmanagment", true);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // create a interview

        }
        else
        {
            interview = await InterviewService.GetInterview((int)Id);
        }
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/interviewmanagment");
    }

    public DateTime DateDefault { get; set; }

}
