@page "/calendarmanagment"
@using ISAT.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IInterviewService InterviewService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize]

<PageTitle> Calendar Managment </PageTitle>

<h3>Calendar Managment - List of Interviews</h3>
<br />
<hr />
<div class="row">
    <br />
    <div class="mb-3">        
        <label asp-for="Searching" class="form-control">
            Search Interview by : 
            @if (Searching.Length > 0)
            {
                <button class="btn btn-light" @onclick="SearchingReset"><i class="bi bi-arrow-counterclockwise" data-toggle="tooltip" title="Reset Search" /> </button>
            }
        </label>                   
        <InputRadioGroup Name="SearchingBy" @bind-Value="@SearchingByDate">
            <InputRadio Name="SearchingBy" Value="true"/> Date
            <InputDate id="SearchingDate" @bind-Value="SearchingDate" Type="InputDateType.Date" class="form-control" aria-required="true" @onblur="@(x => SearchFor())" @onfocus="@(b=> SearchingByDate=true)"></InputDate>
            <div class="form-group">
                <button @onclick="SearchFor" class="btn btn-primary">Search</button>               
            </div>
            <InputRadio Name="SearchingBy" Value="false"/>Social Name
            <InputText id="Searching" @bind-Value="Searching" class="form-control" aria-required="true" @onfocus="@(b=> SearchingByDate=false)" @onkeypress="SearchFor" @onkeydown="SearchFor" @onkeyup="SearchFor"></InputText>
        </InputRadioGroup>       
    </div>
    

</div>
<hr />
<br />
@if (interviewList == null)
{
    <p> loading </p>
}
else
{
    <p>
        Show:
        <label><input type="checkbox" @bind="showEmail" /> Email</label>
        <label><input type="checkbox" @bind="showPhoneNumber" /> PhoneNumber</label>
        <label><input type="checkbox" @bind="showPlace" /> Place</label>
        <label><input type="checkbox" @bind="showObs" /> Observation</label>
    </p>
    <QuickGrid Items="interviewList.AsQueryable()" Pagination="pagination">
        <TemplateColumn>
            @if (context.InterviewStatusId < 5)
            {
                <button class="btn btn-primary" onclick="@(() => EmailIt(context))" data-toggle="tooltip" title="Send email"><i class="bi bi-envelope" /></button>
            }
        </TemplateColumn>
        <PropertyColumn Property="i => i.InterviewStatus.Status" Title="Status" Sortable="true" />
        <PropertyColumn Property="i=> i.Date" Title="Date" Format="dd/MM" Sortable="true" />
        <PropertyColumn Property="i=> i.StartTime" Title="Start Time" Format="HH:mm" Sortable="true" />
        <PropertyColumn Property="i=> i.EndTime" Title="End Time" Format="HH:mm" Sortable="true" />
        <PropertyColumn Property="i=> i.Interviewee.SocialName" Title="Social Name" Sortable="true" />       
        @if (showEmail)
        {
            <PropertyColumn Property="i => i.Interviewee.Email" Title="E-mail" Sortable="true" />
        }

        @if (showPhoneNumber)
        {
            <PropertyColumn Property="i => i.Interviewee.PhoneNumber" Title="Phone Number" Sortable="true" />
        }

        @if (showPlace)
        {
            <PropertyColumn Property="i => i.Place" Title="Place" Sortable="true" />
        }

        @if (showObs)
        {
            <PropertyColumn Property="i => i.Interviewee.Observation" Title="Observation" Sortable="true" />
        }

        <TemplateColumn>
            @if (context.InterviewStatusId < 5)
            {
                <button class="btn btn-primary" onclick="@(() => EditIt(context))" data-toggle="tooltip" title="Edit"><i class="oi oi-pencil" /></button>

                <button class="btn btn-primary" onclick="@(() => ConfirmedByTeam(context))" data-toggle="tooltip" title="Confirm"><i class="bi bi-journal-check" /></button>

                <button class="btn btn-primary" onclick="@(() => CancelIt(context))" data-toggle="tooltip" title="Cancel"><i class="bi bi-journal-minus" /></button>
            }

        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />

}

@code {
    [Parameter]

    public string Searching { get; set; } = string.Empty;

    protected List<Interview> interviewList = new();

    protected List<Interview> searchInterviewList = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    Boolean showEmail, showPhoneNumber, showObs, showPlace = false;
    Boolean SearchingByDate;

    protected DateTime SearchingDate;

    Guid InterviewerId { get; set; }

    protected void SearchFor()
    {
        if (SearchingByDate)
        {
            if (!String.IsNullOrEmpty(SearchingDate.ToString()))
            {
                interviewList = searchInterviewList.Where(x => (x.Date == SearchingDate.Date)).OrderBy(x => x.StartTime).ToList();
            }
        }
        else
        {

            if (!string.IsNullOrEmpty(Searching))
            {
                interviewList = searchInterviewList.Where(x => x.Interviewee.SocialName.IndexOf(Searching, StringComparison.OrdinalIgnoreCase) != -1)
                .OrderBy(x => x.StartTime)
                .ToList();
            }
            else
            {
                interviewList = searchInterviewList;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var stateProvider = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var CurrentUser = stateProvider.User;

        foreach (var claim in CurrentUser.Claims)
        {
            if (claim.Type == "sub")
            {
                InterviewerId = Guid.Parse(claim.Value);
                break;
            }
        }

        SearchingByDate = true;        
        SearchingDate = DateTime.Today;
        await GetInterviews();
        SearchFor();
    }

    protected async Task GetInterviews()
    {
        interviewList = await InterviewService.GetInterviews();

        // if ClaimInterviewer
        interviewList = interviewList.Where(i => i.InterviewerId == InterviewerId).ToList();

        interviewList = interviewList.OrderBy(x => x.StartTime).ToList();
        searchInterviewList = interviewList;
    }

    public void Cancel()
    {

        NavigationManager.NavigateTo("/calendarmanagment", true);
    }

    public void SearchingReset()
    {
        Searching = string.Empty;
        interviewList = searchInterviewList;
    }

    public void EditIt(Interview i)
    {
        NavigationManager.NavigateTo($"interviewaddedit/{i.Id}");
    }

    public async void EmailIt(Interview i)
    {
        Searching = "";
        @if (!(i.Id == Guid.Empty))
        {
            ;
            await InterviewService.UpdateStatus(i.Id, 2); //2 Waiting Confirmation - Email Sent
        }
        // Needed a Email Servicing
        // SendEmailAskingConfirmation(i)
        //Cancel();
    }

    public async void CancelIt(Interview i)
    {
        Searching = "";
        @if (!(i.Id == Guid.Empty))
        {
            await InterviewService.UpdateStatus(i.Id, 6); //6 Canceled by Team
        }
        // Needed a Email Servicing
        // SendEmailCancelingInterview(i)
        Cancel();
    }

    public async void ConfirmedByTeam(Interview i)
    {
        Searching = "";
        @if (!(i.Id == Guid.Empty))
        {
            await InterviewService.UpdateStatus(i.Id, 4); //4 Confirmed by Team
        }
        Cancel();
    }

}