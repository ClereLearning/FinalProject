@page "/intervieweemanagment"
@using ISAT.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims;
@inject IIntervieweeService IntervieweeService
@inject IInterviewService InterviewService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize]

<PageTitle> Interviewee Managment </PageTitle>

<h3>Interviewee Managment </h3>
<br />
<AuthorizeView Roles="Interviewer">
    <Authorized>
        <hr />
        <div class="row">
            <div class="col-md-6">
                <a href='/intervieweeaddedit' class="btn btn-primary" role="button">
                    <i class="oi oi-plus"></i>
                    Add Interviewee
                </a>
            </div>
        </div>
        <br />
    </Authorized>
</AuthorizeView>
<hr />
<div class="row">
    <br />
    <div class="mb-3">
        <label asp-for="Searching" class="form-control">
            Search Interviewee
            @if (Searching.Length > 0)
            {
                <button class="btn btn-light" @onclick="SearchingReset"><i class="bi bi-arrow-counterclockwise" data-toggle="tooltip" title="Reset Search" /> </button>
            }
        </label>
        <InputText id="Searching" @bind-Value="Searching" class="form-control" aria-required="true" @onkeypress="SearchFor" @onkeydown="SearchFor" @onkeyup="SearchFor"></InputText>
    </div>
</div>
<h3>List of Interviewees</h3>
<hr />
<br />
@if (intervieweeList == null)
{
    <p> loading </p>
}
else
{
    <QuickGrid Items="intervieweeList.AsQueryable()" Pagination="pagination">
        <PropertyColumn Property="i=> i.SocialName" Title="Social Name" Sortable="true" />
        <PropertyColumn Property="i => i.FirstName" Title="First Name" Sortable="true" />
        <PropertyColumn Property="i=> i.LastName" Title="Last Name" Sortable="true" />
        <PropertyColumn Property="i=> i.Email" Title="E-mail" Sortable="true" />
        <PropertyColumn Property="i=> i.PhoneNumber" Title="Phone number" Sortable="true" />
        <!--
        <PropertyColumn Property="i=> i.Inactive" Title="Inactive" Sortable="true" />
            -->        
                <TemplateColumn>
                    <button class="btn btn-primary" onclick="@(() => EditIt(context))" data-toggle="tooltip" title="Edit"><i class="oi oi-pencil" /></button>

                    @if (interviews.Where(x => x.IntervieweeId == context.Id).ToList().Count() < 1)
                    {
                        <button class="btn btn-primary" onclick="@(() => DeleteIt(context))" data-toggle="tooltip" title="Delete"><i class="oi oi-trash" /></button>
                    }
                </TemplateColumn>            
    </QuickGrid>
    <Paginator State="@pagination" />
}

@code {
    [Parameter]

    public string Searching { get; set; } = string.Empty;

    public string idu { get; set; } = string.Empty;

    protected List<Interviewee> intervieweeList = new();

    protected List<Interviewee> searchIntervieweeList = new();

    protected List<Interview> interviews = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    Guid InterviewerId { get; set; }

    protected void SearchFor()
    {
        if (!string.IsNullOrEmpty(Searching))
        {
            intervieweeList = searchIntervieweeList.Where(x => x.SocialName.IndexOf(Searching, StringComparison.OrdinalIgnoreCase) != -1)
            .ToList();
        }
        else
        {
            intervieweeList = searchIntervieweeList;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetInterviewees();
        interviews = await InterviewService.GetInterviews();
        SearchFor();

        var stateProvider = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var CurrentUser = stateProvider.User;

        foreach (var claim in CurrentUser.Claims)
        {
            if (claim.Type == "sub")
            {
                InterviewerId = Guid.Parse(claim.Value);
                break;
            }
        }

    }

    protected async Task GetInterviewees()
    {
        intervieweeList = await IntervieweeService.GetInterviewees();
        searchIntervieweeList = intervieweeList;
    }

    public void Cancel()
    {

        NavigationManager.NavigateTo("/intervieweemanagment", true);
    }

    public void SearchingReset()
    {
        Searching = string.Empty;
        intervieweeList = searchIntervieweeList;
    }

    public void EditIt(Interviewee i)
    {
        NavigationManager.NavigateTo($"intervieweeaddedit/{i.Id}");
    }

    public async void DeleteIt(Interviewee i)
    {
        Searching = "";
        @if (!(i.Id == Guid.Empty))
        {
            await IntervieweeService.DeleteInterviewee(i.Id);
        }
        Cancel();

    }

}
