@page "/intervieweemanagment"
@using ISAT.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IIntervieweeService IntervieweeService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

<PageTitle> Interviewee Managment </PageTitle>

<h3>Interviewee Managment</h3>
<br />
<hr />
<div class="row">
    <div class="col-md-6">
        <a href='/intervieweeaddedit' class="btn btn-primary" role="button">
            <i class="oi oi-plus"></i>
            Add Interviewee
        </a>
    </div>
</div>
<br />
<hr />
<div class="row">
    <br />
    <div class="mb-3">
        <label asp-for="Searching" class="form-control">Search Interviewee</label>
        <InputText id="Searching" @bind-Value="Searching" class="form-control" aria-required="true" @onkeypress="SearchFor" @onkeydown="SearchFor" @onkeyup="SearchFor"></InputText>
    </div>
    @if (Searching.Length > 0)
    {
        <div>
            <button class="btn btn-danger" @onclick="SearchingReset"><i class="io oi-delete" /> </button>
        </div>
    }

</div>
<h3>List of Interviewees</h3>
<hr />
<br />
@if (intervieweeList == null)
{
    <p> loading </p>
}
else
{
    <QuickGrid Items="intervieweeList.AsQueryable()" Pagination="pagination">
        <PropertyColumn Property="i=> i.SocialName" Title="Social Name" Sortable="true" />
        <PropertyColumn Property="i => i.FirstName" Title="First Name" Sortable="true" />
        <PropertyColumn Property="i=> i.LastName" Title="Last Name" Sortable="true" />        
        <PropertyColumn Property="i=> i.Email" Title="E-mail" Sortable="true" />
        <PropertyColumn Property="i=> i.PhoneNumber" Title="Phone number" Sortable="true" />
        <PropertyColumn Property="i=> i.Inactive" Title="Inactive" Sortable="true" />
        <TemplateColumn>
            <button class="btn btn-primary" onclick="@(() => EditIt(context))"><i class="oi oi-pencil" /></button>
            <button class="btn btn-primary" onclick="@(() => DeleteIt(context))"><i class="oi oi-trash" /></button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination" />

}

@code {
    [Parameter]

    public string Searching { get; set; } = string.Empty;

    protected List<Interviewee> intervieweeList = new();

    protected List<Interviewee> searchIntervieweeList = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    protected void SearchFor()
    {
        if (!string.IsNullOrEmpty(Searching))
        {
            intervieweeList = searchIntervieweeList.Where(x => x.FirstName.IndexOf(Searching, StringComparison.OrdinalIgnoreCase) != -1)
            .ToList();
        }
        else
        {
            intervieweeList = searchIntervieweeList;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetInterviewees();
        SearchFor();
    }

    protected async Task GetInterviewees()
    {
        intervieweeList = await IntervieweeService.GetInterviewees();
        searchIntervieweeList = intervieweeList;
    }

    public void Cancel()
    {

        NavigationManager.NavigateTo("/intervieweemanagment", true);
    }

    public void SearchingReset()
    {
        Searching = string.Empty;
        intervieweeList = searchIntervieweeList;
    }

    public void EditIt(Interviewee i)
    {
        NavigationManager.NavigateTo($"intervieweeaddedit/{i.Id}");
    }

    public async void DeleteIt(Interviewee i)
    {
        Searching = "";
        @if (!(i.Id == Guid.Empty))
        {
            await IntervieweeService.DeleteInterviewee(i.Id);
        }
        Cancel();

    }

}
